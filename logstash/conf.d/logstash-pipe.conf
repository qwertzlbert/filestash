input {
    beats {
        port => "5044"
        ssl => true
        ssl_certificate_authorities => ["/etc/logstash/cacert.pem"]
        ssl_certificate => "/etc/logstash/server.pem"
        ssl_key => "/etc/logstash/serverkey.pem"
        ssl_verify_mode => "force_peer"
    }
}

filter {
  if [fields][service] == "filebeat" {
    grok {
      match => { "message" => "%{TIMESTAMP_ISO8601:timestamp} %{LOGLEVEL:loglevel} %{GREEDYDATA:filebeat_message}" }
    }
    mutate {
      remove_field => [ "message" ]
    }
  }
  if [fields][service] == "lxd-guest-log" {
    grok {
      match => { "message" => "%{SPACE}lxc %{DATESTAMP_EVENTLOG:lxc_guest_timestamp} %{LOGLEVEL:loglevel}%{SPACE}%{GREEDYDATA:lxc_module} - %{GREEDYDATA:lxc_module_detail} - %{GREEDYDATA:lxc_guest_message}" }
    }
    mutate {
      remove_field => [ "message" ]
    }
  }
  if [fields][service] == "lxd-log" {
    grok {
      match => { "message" => "lvl=%{LOGLEVEL:loglevel} msg=\"%{GREEDYDATA:lxd_message}\" t=%{TIMESTAMP_ISO8601:lxd_timestamp}" }
    }
    mutate {
      remove_field => [ "message" ]
    }
  }
  if [fields][service] == "unattended-upgrades" {
    grok {
      match => { "message" => "%{TIMESTAMP_ISO8601:upgrade_timestamp} %{LOGLEVEL:loglevel} %{GREEDYDATA:upgrade_message}" }
    }
    mutate {
      remove_field => [ "message" ]
    }
  }

  # for ufw firewall logs
  if [fields][service] == "ufw" {
    grok {
      patterns_dir => ["/etc/logstash/patterns/patterns"]
      patterns_files_glob => "*"
      match => { "message" => "%{SYSLOGTIMESTAMP:ufw_timestamp} %{SYSLOGHOST:ufw_hostname} %{DATA:ufw_program}: \[%{KERNELTIME:kernel_time}\] %{GREEDYDATA:ufw_message}" }
    }
    grok {
      match => { "ufw_message" => "\[UFW %{WORD:ufw_action}\] IN=%{DATA:ufw_interface} OUT= MAC=%{DATA:ufw_mac} SRC=%{IP:ufw_src_ip} DST=%{IP:ufw_dest_ip} %{GREEDYDATA:ufw_tcp_opts} PROTO=%{WORD:ufw_protocol} %{GREEDYDATA:ufw_message}" }
     }
    grok {
      match => { "ufw_message" => "SPT=%{INT:ufw_src_port} DPT=%{INT:ufw_dst_port} %{GREEDYDATA:ufw_tcp_opts}" }
    }
   geoip { 
        source => "ufw_src_ip" 
        target => "[system][ufw][geoip]"
   }
   mutate {
     remove_field => [ "message" ]
    }
  }
    
# for syslogs
if [fileset][module] == "system" {
    if [fileset][name] == "auth" {
      grok {
        match => { "message" => ["%{SYSLOGTIMESTAMP:[system][auth][timestamp]} %{SYSLOGHOST:[system][auth][hostname]} sshd(?:\[%{POSINT:[system][auth][pid]}\])?: %{DATA:[system][auth][ssh][event]} %{DATA:[system][auth][ssh][method]} for (invalid user )?%{DATA:[system][auth][user]} from %{IPORHOST:[system][auth][ssh][ip]} port %{NUMBER:[system][auth][ssh][port]} ssh2(: %{GREEDYDATA:[system][auth][ssh][signature]})?",
                  "%{SYSLOGTIMESTAMP:[system][auth][timestamp]} %{SYSLOGHOST:[system][auth][hostname]} sshd(?:\[%{POSINT:[system][auth][pid]}\])?: %{DATA:[system][auth][ssh][event]} user %{DATA:[system][auth][user]} from %{IPORHOST:[system][auth][ssh][ip]}",
                  "%{SYSLOGTIMESTAMP:[system][auth][timestamp]} %{SYSLOGHOST:[system][auth][hostname]} sshd(?:\[%{POSINT:[system][auth][pid]}\])?: Did not receive identification string from %{IPORHOST:[system][auth][ssh][dropped_ip]}",
                  "%{SYSLOGTIMESTAMP:[system][auth][timestamp]} %{SYSLOGHOST:[system][auth][hostname]} sudo(?:\[%{POSINT:[system][auth][pid]}\])?: \s*%{DATA:[system][auth][user]} :( %{DATA:[system][auth][sudo][error]} ;)? TTY=%{DATA:[system][auth][sudo][tty]} ; PWD=%{DATA:[system][auth][sudo][pwd]} ; USER=%{DATA:[system][auth][sudo][user]} ; COMMAND=%{GREEDYDATA:[system][auth][sudo][command]}",
                  "%{SYSLOGTIMESTAMP:[system][auth][timestamp]} %{SYSLOGHOST:[system][auth][hostname]} groupadd(?:\[%{POSINT:[system][auth][pid]}\])?: new group: name=%{DATA:system.auth.groupadd.name}, GID=%{NUMBER:system.auth.groupadd.gid}",
                  "%{SYSLOGTIMESTAMP:[system][auth][timestamp]} %{SYSLOGHOST:[system][auth][hostname]} useradd(?:\[%{POSINT:[system][auth][pid]}\])?: new user: name=%{DATA:[system][auth][user][add][name]}, UID=%{NUMBER:[system][auth][user][add][uid]}, GID=%{NUMBER:[system][auth][user][add][gid]}, home=%{DATA:[system][auth][user][add][home]}, shell=%{DATA:[system][auth][user][add][shell]}$",
                  "%{SYSLOGTIMESTAMP:[system][auth][timestamp]} %{SYSLOGHOST:[system][auth][hostname]} %{DATA:[system][auth][program]}(?:\[%{POSINT:[system][auth][pid]}\])?: %{GREEDYMULTILINE:[system][auth][message]}"] }
        pattern_definitions => {
          "GREEDYMULTILINE"=> "(.|\n)*"
        }
        remove_field => "message"
      }
      date {
        match => [ "[system][auth][timestamp]", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss" ]
      }
      geoip {
        source => "[system][auth][ssh][ip]"
        target => "[system][auth][ssh][geoip]"
      }
    }
    else if [fileset][name] == "syslog" {
      grok {
        match => { "message" => ["%{SYSLOGTIMESTAMP:[system][syslog][timestamp]} %{SYSLOGHOST:[system][syslog][hostname]} %{DATA:[system][syslog][program]}(?:\[%{POSINT:[system][syslog][pid]}\])?: %{GREEDYMULTILINE:[system][syslog][message]}"] }
        pattern_definitions => { "GREEDYMULTILINE" => "(.|\n)*" }
        remove_field => "message"
      }
      date {
        match => [ "[system][syslog][timestamp]", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss" ]
      }
    }
  }

}	

output {
  elasticsearch {
    hosts => ["localhost:9200"]
    sniffing => true
    manage_template => false
    index => "%{[@metadata][beat]}-%{+YYYY.MM.dd}"
    document_type => "%{[@metadata][type]}"
  }
}
